// Code generated by goyacc - DO NOT EDIT.

package sql

import __yyfmt__ "fmt"

type yySymType struct {
	yys                  int
	literal              string
	identifier           string
	signedNumber         int64
	statement            interface{}
	columnNameList       []string
	columnName           string
	columnDefList        []ColumnDef
	columnDef            ColumnDef
	indexedColumnList    []IndexedColumn
	indexedColumn        IndexedColumn
	name                 string
	withoutRowid         bool
	unique               bool
	bool                 bool
	collate              string
	sortOrder            SortOrder
	columnConstraint     columnConstraint
	columnConstraintList []columnConstraint
	tableConstraint      TableConstraint
	tableConstraintList  []TableConstraint
	triggerAction        TriggerAction
	trigger              Trigger
	triggerList          []Trigger
	where                Expression
	expr                 Expression
	exprList             []Expression
	float                float64
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault     = 57394
	yyEofCode     = 57344
	ACTION        = 57346
	AND           = 57347
	ASC           = 57348
	AUTOINCREMENT = 57349
	CASCADE       = 57350
	COLLATE       = 57351
	CONFLICT      = 57352
	CONSTRAINT    = 57353
	CREATE        = 57354
	DEFAULT       = 57355
	DEFERRABLE    = 57356
	DEFERRED      = 57357
	DELETE        = 57358
	DESC          = 57359
	FOREIGN       = 57360
	FROM          = 57361
	GLOB          = 57362
	IN            = 57363
	INDEX         = 57364
	INITIALLY     = 57365
	IS            = 57366
	KEY           = 57367
	LIKE          = 57368
	MATCH         = 57369
	NO            = 57370
	NOT           = 57371
	NULL          = 57372
	ON            = 57373
	OR            = 57374
	PRIMARY       = 57375
	REFERENCES    = 57376
	REGEXP        = 57377
	REPLACE       = 57378
	RESTRICT      = 57379
	ROWID         = 57380
	SELECT        = 57381
	SET           = 57382
	TABLE         = 57383
	UNIQUE        = 57384
	UPDATE        = 57385
	WHERE         = 57386
	WITHOUT       = 57387
	yyErrCode     = 57345
	tBare         = 57388
	tFloat        = 57393
	tIdentifier   = 57390
	tLiteral      = 57389
	tOperator     = 57391
	tSignedNumber = 57392

	yyMaxDepth = 200
	yyTabOfs   = -99
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		44:    0,  // ',' (94x)
		41:    1,  // ')' (92x)
		57351: 2,  // COLLATE (43x)
		43:    3,  // '+' (40x)
		45:    4,  // '-' (40x)
		57372: 5,  // NULL (40x)
		57384: 6,  // UNIQUE (33x)
		57375: 7,  // PRIMARY (32x)
		57344: 8,  // $end (30x)
		57388: 9,  // tBare (30x)
		57355: 10, // DEFAULT (28x)
		57390: 11, // tIdentifier (28x)
		57371: 12, // NOT (27x)
		57411: 13, // identifier (26x)
		57348: 14, // ASC (24x)
		57359: 15, // DESC (24x)
		40:    16, // '(' (23x)
		57391: 17, // tOperator (22x)
		57373: 18, // ON (19x)
		57424: 19, // signedNumber (18x)
		57392: 20, // tSignedNumber (18x)
		57410: 21, // floatNumber (13x)
		57393: 22, // tFloat (13x)
		57389: 23, // tLiteral (13x)
		57408: 24, // expr (11x)
		57360: 25, // FOREIGN (7x)
		57361: 26, // FROM (7x)
		57401: 27, // columnName (5x)
		57378: 28, // REPLACE (5x)
		57349: 29, // AUTOINCREMENT (4x)
		57412: 30, // indexedColumn (4x)
		57413: 31, // indexedColumnExpr (4x)
		57365: 32, // INITIALLY (4x)
		57352: 33, // CONFLICT (3x)
		57364: 34, // INDEX (3x)
		57414: 35, // indexedColumnList (3x)
		57367: 36, // KEY (3x)
		57350: 37, // CASCADE (2x)
		57397: 38, // columnConstraint (2x)
		57399: 39, // columnDef (2x)
		57402: 40, // columnNameList (2x)
		57353: 41, // CONSTRAINT (2x)
		57404: 42, // constraintName (2x)
		57356: 43, // DEFERRABLE (2x)
		57416: 44, // literal (2x)
		57370: 45, // NO (2x)
		57379: 46, // RESTRICT (2x)
		57421: 47, // resultColumn (2x)
		57382: 48, // SET (2x)
		57425: 49, // sortOrder (2x)
		57426: 50, // tableConstraint (2x)
		57429: 51, // triggerAction (2x)
		57346: 52, // ACTION (1x)
		57395: 53, // autoincrement (1x)
		57396: 54, // collate (1x)
		57398: 55, // columnConstraintList (1x)
		57400: 56, // columnDefList (1x)
		57403: 57, // conflict (1x)
		57354: 58, // CREATE (1x)
		57405: 59, // createIndexStmt (1x)
		57406: 60, // createTableStmt (1x)
		57407: 61, // deferrable (1x)
		57357: 62, // DEFERRED (1x)
		57358: 63, // DELETE (1x)
		57409: 64, // exprList (1x)
		57415: 65, // initiallyDeferred (1x)
		57417: 66, // on (1x)
		57418: 67, // optColumnNameList (1x)
		57419: 68, // program (1x)
		57376: 69, // REFERENCES (1x)
		57420: 70, // replace (1x)
		57422: 71, // resultColumnList (1x)
		57380: 72, // ROWID (1x)
		57381: 73, // SELECT (1x)
		57423: 74, // selectStmt (1x)
		57383: 75, // TABLE (1x)
		57427: 76, // tableConstraintList (1x)
		57428: 77, // trigger (1x)
		57430: 78, // triggerList (1x)
		57431: 79, // typeName (1x)
		57432: 80, // unique (1x)
		57385: 81, // UPDATE (1x)
		57386: 82, // WHERE (1x)
		57433: 83, // where (1x)
		57387: 84, // WITHOUT (1x)
		57434: 85, // withoutRowid (1x)
		57394: 86, // $default (0x)
		57347: 87, // AND (0x)
		57345: 88, // error (0x)
		57362: 89, // GLOB (0x)
		57363: 90, // IN (0x)
		57366: 91, // IS (0x)
		57368: 92, // LIKE (0x)
		57369: 93, // MATCH (0x)
		57374: 94, // OR (0x)
		57377: 95, // REGEXP (0x)
	}

	yySymNames = []string{
		"','",
		"')'",
		"COLLATE",
		"'+'",
		"'-'",
		"NULL",
		"UNIQUE",
		"PRIMARY",
		"$end",
		"tBare",
		"DEFAULT",
		"tIdentifier",
		"NOT",
		"identifier",
		"ASC",
		"DESC",
		"'('",
		"tOperator",
		"ON",
		"signedNumber",
		"tSignedNumber",
		"floatNumber",
		"tFloat",
		"tLiteral",
		"expr",
		"FOREIGN",
		"FROM",
		"columnName",
		"REPLACE",
		"AUTOINCREMENT",
		"indexedColumn",
		"indexedColumnExpr",
		"INITIALLY",
		"CONFLICT",
		"INDEX",
		"indexedColumnList",
		"KEY",
		"CASCADE",
		"columnConstraint",
		"columnDef",
		"columnNameList",
		"CONSTRAINT",
		"constraintName",
		"DEFERRABLE",
		"literal",
		"NO",
		"RESTRICT",
		"resultColumn",
		"SET",
		"sortOrder",
		"tableConstraint",
		"triggerAction",
		"ACTION",
		"autoincrement",
		"collate",
		"columnConstraintList",
		"columnDefList",
		"conflict",
		"CREATE",
		"createIndexStmt",
		"createTableStmt",
		"deferrable",
		"DEFERRED",
		"DELETE",
		"exprList",
		"initiallyDeferred",
		"on",
		"optColumnNameList",
		"program",
		"REFERENCES",
		"replace",
		"resultColumnList",
		"ROWID",
		"SELECT",
		"selectStmt",
		"TABLE",
		"tableConstraintList",
		"trigger",
		"triggerList",
		"typeName",
		"unique",
		"UPDATE",
		"WHERE",
		"where",
		"WITHOUT",
		"withoutRowid",
		"$default",
		"AND",
		"error",
		"GLOB",
		"IN",
		"IS",
		"LIKE",
		"MATCH",
		"OR",
		"REGEXP",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {68, 1},
		2:  {68, 1},
		3:  {68, 1},
		4:  {44, 1},
		5:  {44, 1},
		6:  {13, 1},
		7:  {13, 1},
		8:  {19, 1},
		9:  {19, 2},
		10: {19, 2},
		11: {21, 1},
		12: {21, 2},
		13: {21, 2},
		14: {27, 1},
		15: {40, 1},
		16: {40, 3},
		17: {67, 3},
		18: {47, 1},
		19: {71, 1},
		20: {71, 3},
		21: {38, 4},
		22: {38, 1},
		23: {38, 1},
		24: {38, 2},
		25: {38, 2},
		26: {38, 2},
		27: {38, 2},
		28: {55, 0},
		29: {55, 1},
		30: {55, 2},
		31: {50, 5},
		32: {50, 7},
		33: {50, 11},
		34: {42, 0},
		35: {42, 2},
		36: {76, 0},
		37: {76, 3},
		38: {76, 4},
		39: {53, 0},
		40: {53, 1},
		41: {56, 1},
		42: {56, 3},
		43: {39, 3},
		44: {79, 0},
		45: {79, 1},
		46: {79, 4},
		47: {79, 6},
		48: {54, 0},
		49: {54, 2},
		50: {49, 0},
		51: {49, 1},
		52: {49, 1},
		53: {85, 0},
		54: {85, 2},
		55: {80, 0},
		56: {80, 1},
		57: {66, 0},
		58: {66, 1},
		59: {35, 1},
		60: {35, 3},
		61: {31, 1},
		62: {30, 3},
		63: {51, 2},
		64: {51, 2},
		65: {51, 1},
		66: {51, 1},
		67: {51, 2},
		68: {77, 3},
		69: {77, 3},
		70: {78, 0},
		71: {78, 2},
		72: {61, 0},
		73: {61, 1},
		74: {65, 0},
		75: {65, 2},
		76: {57, 0},
		77: {57, 1},
		78: {70, 0},
		79: {70, 1},
		80: {83, 0},
		81: {83, 2},
		82: {24, 1},
		83: {24, 4},
		84: {24, 1},
		85: {24, 1},
		86: {24, 1},
		87: {24, 1},
		88: {24, 1},
		89: {24, 3},
		90: {24, 3},
		91: {24, 3},
		92: {24, 3},
		93: {64, 0},
		94: {64, 1},
		95: {64, 3},
		96: {74, 4},
		97: {60, 8},
		98: {59, 10},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [167][]uint16{
		// 0
		{58: 105, 103, 102, 68: 100, 73: 104, 101},
		{8: 99},
		{8: 98},
		{8: 97},
		{8: 96},
		// 5
		{9: 110, 11: 111, 13: 211, 27: 259, 47: 260, 71: 261},
		{6: 106, 34: 44, 75: 107, 80: 108},
		{34: 43},
		{9: 110, 11: 111, 13: 164},
		{34: 109},
		// 10
		{9: 110, 11: 111, 13: 112},
		{93, 93, 93, 5: 93, 93, 93, 93, 93, 93, 93, 93, 16: 93, 18: 93, 25: 93, 93},
		{92, 92, 92, 5: 92, 92, 92, 92, 92, 92, 92, 92, 16: 92, 18: 92, 25: 92, 92},
		{18: 113},
		{9: 110, 11: 111, 13: 114},
		// 15
		{16: 115},
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 124, 30: 122, 125, 35: 123},
		{12, 12, 12, 12, 12, 8: 12, 14: 12, 12, 93, 12},
		{11, 11, 11, 11, 11, 8: 11, 14: 11, 11, 92, 11},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 10: 91, 12: 91, 14: 91, 91, 17: 91},
		// 20
		{3: 120, 119, 19: 162, 118, 163, 121},
		{3: 120, 119, 19: 160, 118, 161, 121},
		{88, 88, 88, 88, 88, 8: 88, 14: 88, 88, 17: 88},
		{40, 40},
		{154, 155},
		// 25
		{38, 38, 38, 134, 135, 14: 38, 38, 17: 133},
		{51, 51, 146, 14: 51, 51, 54: 147},
		{17, 17, 17, 17, 17, 8: 17, 14: 17, 17, 17: 17},
		{16: 140},
		{15, 15, 15, 15, 15, 8: 15, 14: 15, 15, 17: 15},
		// 30
		{14, 14, 14, 14, 14, 8: 14, 14: 14, 14, 17: 14},
		{13, 13, 13, 13, 13, 8: 13, 14: 13, 13, 17: 13},
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 132},
		{1: 136, 3: 134, 135, 17: 133},
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 139},
		// 35
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 138},
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 137},
		{7, 7, 7, 7, 7, 8: 7, 14: 7, 7, 17: 7},
		{8, 8, 8, 134, 135, 8: 8, 14: 8, 8, 17: 133},
		{9, 9, 9, 134, 135, 8: 9, 14: 9, 9, 17: 133},
		// 40
		{10, 10, 10, 134, 135, 8: 10, 14: 10, 10, 17: 133},
		{6, 6, 3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 142, 64: 141},
		{144, 143},
		{5, 5, 3: 134, 135, 17: 133},
		{16, 16, 16, 16, 16, 8: 16, 14: 16, 16, 17: 16},
		// 45
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 145},
		{4, 4, 3: 134, 135, 17: 133},
		{9: 151, 23: 152, 44: 153},
		{49, 49, 14: 148, 149, 49: 150},
		{48, 48, 48, 5: 48, 48, 48, 10: 48, 12: 48, 29: 48},
		// 50
		{47, 47, 47, 5: 47, 47, 47, 10: 47, 12: 47, 29: 47},
		{37, 37},
		{95, 95, 95, 5: 95, 95, 95, 10: 95, 12: 95, 14: 95, 95},
		{94, 94, 94, 5: 94, 94, 94, 10: 94, 12: 94, 14: 94, 94},
		{50, 50, 14: 50, 50},
		// 55
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 124, 30: 159, 125},
		{8: 19, 82: 156, 157},
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 158},
		{8: 1},
		{3: 134, 135, 8: 18, 17: 133},
		// 60
		{39, 39},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 10: 89, 12: 89, 14: 89, 89, 17: 89},
		{86, 86, 86, 86, 86, 8: 86, 14: 86, 86, 17: 86},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 10: 90, 12: 90, 14: 90, 90, 17: 90},
		{87, 87, 87, 87, 87, 8: 87, 14: 87, 87, 17: 87},
		// 65
		{16: 165},
		{9: 110, 11: 111, 13: 168, 39: 166, 56: 167},
		{58, 58},
		{196, 63, 76: 197},
		{55, 55, 55, 5: 55, 55, 55, 9: 110, 55, 111, 55, 170, 79: 169},
		// 70
		{71, 71, 183, 5: 181, 180, 179, 10: 184, 12: 182, 38: 185, 55: 186},
		{54, 54, 54, 5: 54, 54, 54, 10: 54, 12: 54, 16: 171},
		{3: 173, 172, 19: 174, 118},
		{3: 173, 172, 19: 162, 118},
		{3: 173, 172, 19: 160, 118},
		// 75
		{176, 175},
		{53, 53, 53, 5: 53, 53, 53, 10: 53, 12: 53},
		{3: 173, 172, 19: 177, 118},
		{1: 178},
		{52, 52, 52, 5: 52, 52, 52, 10: 52, 12: 52},
		// 80
		{36: 192},
		{77, 77, 77, 5: 77, 77, 77, 10: 77, 12: 77},
		{76, 76, 76, 5: 76, 76, 76, 10: 76, 12: 76},
		{5: 191},
		{9: 110, 11: 111, 13: 190},
		// 85
		{3: 173, 172, 9: 151, 19: 188, 118, 23: 152, 44: 189},
		{70, 70, 70, 5: 70, 70, 70, 10: 70, 12: 70},
		{56, 56, 183, 5: 181, 180, 179, 10: 184, 12: 182, 38: 187},
		{69, 69, 69, 5: 69, 69, 69, 10: 69, 12: 69},
		{73, 73, 73, 5: 73, 73, 73, 10: 73, 12: 73},
		// 90
		{72, 72, 72, 5: 72, 72, 72, 10: 72, 12: 72},
		{74, 74, 74, 5: 74, 74, 74, 10: 74, 12: 74},
		{75, 75, 75, 5: 75, 75, 75, 10: 75, 12: 75},
		{49, 49, 49, 5: 49, 49, 49, 10: 49, 12: 49, 14: 148, 149, 29: 49, 49: 193},
		{60, 60, 60, 5: 60, 60, 60, 10: 60, 12: 60, 29: 195, 53: 194},
		// 95
		{78, 78, 78, 5: 78, 78, 78, 10: 78, 12: 78},
		{59, 59, 59, 5: 59, 59, 59, 10: 59, 12: 59},
		{6: 65, 65, 9: 110, 11: 111, 13: 168, 25: 65, 39: 257, 41: 203, 256},
		{198, 199},
		{6: 65, 65, 25: 65, 41: 203, 204},
		// 100
		{8: 46, 84: 200, 201},
		{72: 202},
		{8: 2},
		{8: 45},
		{9: 110, 11: 111, 13: 255},
		// 105
		{6: 206, 205, 25: 207, 50: 208},
		{36: 251},
		{16: 242},
		{36: 209},
		{61, 61},
		// 110
		{16: 210},
		{9: 110, 11: 111, 13: 211, 27: 212, 40: 213},
		{85, 85, 26: 85},
		{84, 84},
		{214, 215},
		// 115
		{9: 110, 11: 111, 13: 211, 27: 241},
		{69: 216},
		{9: 110, 11: 111, 13: 217},
		{16: 218, 67: 219},
		{9: 110, 11: 111, 13: 211, 27: 212, 40: 239},
		// 120
		{27, 27, 18: 27, 32: 27, 43: 221, 61: 220},
		{25, 25, 18: 25, 32: 223, 65: 222},
		{26, 26, 18: 26, 32: 26},
		{29, 29, 18: 29, 78: 225},
		{62: 224},
		// 125
		{24, 24, 18: 24},
		{66, 66, 18: 226, 77: 227},
		{63: 228, 81: 229},
		{28, 28, 18: 28},
		{37: 231, 45: 233, 232, 48: 230, 51: 238},
		// 130
		{37: 231, 45: 233, 232, 48: 230, 51: 234},
		{5: 236, 10: 237},
		{34, 34, 18: 34},
		{33, 33, 18: 33},
		{52: 235},
		// 135
		{30, 30, 18: 30},
		{32, 32, 18: 32},
		{36, 36, 18: 36},
		{35, 35, 18: 35},
		{31, 31, 18: 31},
		// 140
		{214, 240},
		{82, 82, 18: 82, 32: 82, 43: 82},
		{83, 83},
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 124, 30: 122, 125, 35: 243},
		{154, 244},
		// 145
		{42, 42, 18: 246, 28: 42, 33: 42, 66: 245},
		{23, 23, 28: 23, 33: 248, 57: 247},
		{41, 41, 28: 41, 33: 41},
		{21, 21, 28: 250, 70: 249},
		{22, 22, 28: 22},
		// 150
		{67, 67},
		{20, 20},
		{16: 252},
		{3: 120, 119, 126, 9: 116, 11: 117, 13: 127, 16: 131, 19: 128, 118, 129, 121, 130, 124, 30: 122, 125, 35: 253},
		{154, 254},
		// 155
		{68, 68},
		{6: 64, 64, 25: 64},
		{6: 206, 205, 25: 207, 50: 258},
		{57, 57},
		{62, 62},
		// 160
		{81, 26: 81},
		{80, 26: 80},
		{262, 26: 263},
		{9: 110, 11: 111, 13: 211, 27: 259, 47: 265},
		{9: 110, 11: 111, 13: 264},
		// 165
		{8: 3},
		{79, 26: 79},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 88

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 4:
		{
			yyVAL.literal = yyS[yypt-0].identifier
		}
	case 5:
		{
			yyVAL.literal = yyS[yypt-0].identifier
		}
	case 6:
		{
			yyVAL.identifier = yyS[yypt-0].identifier
		}
	case 7:
		{
			yyVAL.identifier = yyS[yypt-0].identifier
		}
	case 8:
		{
			yyVAL.signedNumber = yyS[yypt-0].signedNumber
		}
	case 9:
		{
			yyVAL.signedNumber = -yyS[yypt-0].signedNumber
		}
	case 10:
		{
			yyVAL.signedNumber = yyS[yypt-0].signedNumber
		}
	case 11:
		{
			yyVAL.float = yyS[yypt-0].float
		}
	case 12:
		{
			yyVAL.float = -yyS[yypt-0].float
		}
	case 13:
		{
			yyVAL.float = yyS[yypt-0].float
		}
	case 14:
		{
			yyVAL.columnName = yyS[yypt-0].identifier
		}
	case 15:
		{
			yyVAL.columnNameList = []string{yyS[yypt-0].columnName}
		}
	case 16:
		{
			yyVAL.columnNameList = append(yyS[yypt-2].columnNameList, yyS[yypt-0].columnName)
		}
	case 17:
		{
			yyVAL.columnNameList = yyS[yypt-1].columnNameList
		}
	case 18:
		{
			yyVAL.columnName = yyS[yypt-0].columnName
		}
	case 19:
		{
			yyVAL.columnNameList = []string{yyS[yypt-0].columnName}
		}
	case 20:
		{
			yyVAL.columnNameList = append(yyS[yypt-2].columnNameList, yyS[yypt-0].columnName)
		}
	case 21:
		{
			yyVAL.columnConstraint = ccPrimaryKey{yyS[yypt-1].sortOrder, yyS[yypt-0].bool}
		}
	case 22:
		{
			yyVAL.columnConstraint = ccUnique(true)
		}
	case 23:
		{
			yyVAL.columnConstraint = ccNull(true)
		}
	case 24:
		{
			yyVAL.columnConstraint = ccNull(false)
		}
	case 25:
		{
			yyVAL.columnConstraint = ccCollate(yyS[yypt-0].identifier)
		}
	case 26:
		{
			yyVAL.columnConstraint = ccDefault(yyS[yypt-0].signedNumber)
		}
	case 27:
		{
			yyVAL.columnConstraint = ccDefault(yyS[yypt-0].literal)
		}
	case 28:
		{
			yyVAL.columnConstraintList = nil
		}
	case 29:
		{
			yyVAL.columnConstraintList = []columnConstraint{yyS[yypt-0].columnConstraint}
		}
	case 30:
		{
			yyVAL.columnConstraintList = append(yyS[yypt-1].columnConstraintList, yyS[yypt-0].columnConstraint)
		}
	case 31:
		{
			yyVAL.tableConstraint = TablePrimaryKey{yyS[yypt-1].indexedColumnList}
		}
	case 32:
		{
			yyVAL.tableConstraint = TableUnique{
				IndexedColumns: yyS[yypt-4].indexedColumnList,
				Conflict:       yyS[yypt-2].bool,
				Replace:        yyS[yypt-1].bool,
			}
		}
	case 33:
		{
			yyVAL.tableConstraint = TableForeignKey{
				Columns:           yyS[yypt-7].columnNameList,
				ForeignTable:      yyS[yypt-4].identifier,
				ForeignColumns:    yyS[yypt-3].columnNameList,
				Deferrable:        yyS[yypt-2].bool,
				InitiallyDeferred: yyS[yypt-1].bool,
				Triggers:          yyS[yypt-0].triggerList,
			}
		}
	case 37:
		{
			yyVAL.tableConstraintList = []TableConstraint{yyS[yypt-0].tableConstraint}
		}
	case 38:
		{
			yyVAL.tableConstraintList = append(yyS[yypt-3].tableConstraintList, yyS[yypt-0].tableConstraint)
		}
	case 40:
		{
			yyVAL.bool = true
		}
	case 41:
		{
			yyVAL.columnDefList = []ColumnDef{yyS[yypt-0].columnDef}
		}
	case 42:
		{
			yyVAL.columnDefList = append(yyS[yypt-2].columnDefList, yyS[yypt-0].columnDef)
		}
	case 43:
		{
			yyVAL.columnDef = makeColumnDef(yyS[yypt-2].identifier, yyS[yypt-1].name, yyS[yypt-0].columnConstraintList)
		}
	case 44:
		{
			yyVAL.name = ""
		}
	case 45:
		{
			yyVAL.name = yyS[yypt-0].identifier
		}
	case 46:
		{
			yyVAL.name = yyS[yypt-3].identifier
		}
	case 47:
		{
			yyVAL.name = yyS[yypt-5].identifier
		}
	case 49:
		{
			yyVAL.collate = yyS[yypt-0].literal
		}
	case 50:
		{
			yyVAL.sortOrder = Asc
		}
	case 51:
		{
			yyVAL.sortOrder = Asc
		}
	case 52:
		{
			yyVAL.sortOrder = Desc
		}
	case 53:
		{
			yyVAL.withoutRowid = false
		}
	case 54:
		{
			yyVAL.withoutRowid = true
		}
	case 55:
		{
			yyVAL.unique = false
		}
	case 56:
		{
			yyVAL.unique = true
		}
	case 57:
		{
			yyVAL.bool = false
		}
	case 58:
		{
			yyVAL.bool = true
		}
	case 59:
		{
			yyVAL.indexedColumnList = []IndexedColumn{yyS[yypt-0].indexedColumn}
		}
	case 60:
		{
			yyVAL.indexedColumnList = append(yyS[yypt-2].indexedColumnList, yyS[yypt-0].indexedColumn)
		}
	case 61:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 62:
		{
			yyVAL.indexedColumn = newIndexColumn(yyS[yypt-2].expr, yyS[yypt-1].collate, yyS[yypt-0].sortOrder)
		}
	case 63:
		{
			yyVAL.triggerAction = ActionSetNull
		}
	case 64:
		{
			yyVAL.triggerAction = ActionSetDefault
		}
	case 65:
		{
			yyVAL.triggerAction = ActionCascade
		}
	case 66:
		{
			yyVAL.triggerAction = ActionRestrict
		}
	case 67:
		{
			yyVAL.triggerAction = ActionNoAction
		}
	case 68:
		{
			yyVAL.trigger = TriggerOnDelete(yyS[yypt-0].triggerAction)
		}
	case 69:
		{
			yyVAL.trigger = TriggerOnUpdate(yyS[yypt-0].triggerAction)
		}
	case 71:
		{
			yyVAL.triggerList = append(yyS[yypt-1].triggerList, yyS[yypt-0].trigger)
		}
	case 72:
		{
			yyVAL.bool = false
		}
	case 73:
		{
			yyVAL.bool = true
		}
	case 74:
		{
			yyVAL.bool = false
		}
	case 75:
		{
			yyVAL.bool = true
		}
	case 76:
		{
			yyVAL.bool = false
		}
	case 77:
		{
			yyVAL.bool = true
		}
	case 78:
		{
			yyVAL.bool = false
		}
	case 79:
		{
			yyVAL.bool = true
		}
	case 81:
		{
			yyVAL.where = yyS[yypt-0].expr
		}
	case 82:
		{
			yyVAL.expr = nil
		}
	case 83:
		{
			yyVAL.expr = ExFunction{yyS[yypt-3].identifier, yyS[yypt-1].exprList}
		}
	case 84:
		{
			yyVAL.expr = yyS[yypt-0].signedNumber
		}
	case 85:
		{
			yyVAL.expr = yyS[yypt-0].float
		}
	case 86:
		{
			yyVAL.expr = yyS[yypt-0].identifier
		}
	case 87:
		{
			yyVAL.expr = ExColumn(yyS[yypt-0].identifier)
		}
	case 88:
		{
			yyVAL.expr = ExColumn(yyS[yypt-0].identifier)
		}
	case 89:
		{
			yyVAL.expr = ExBinaryOp{yyS[yypt-1].identifier, yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 90:
		{
			yyVAL.expr = ExBinaryOp{"+", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 91:
		{
			yyVAL.expr = ExBinaryOp{"-", yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 92:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 93:
		{
			yyVAL.exprList = nil
		}
	case 94:
		{
			yyVAL.exprList = []Expression{yyS[yypt-0].expr}
		}
	case 95:
		{
			yyVAL.exprList = append(yyS[yypt-2].exprList, yyS[yypt-0].expr)
		}
	case 96:
		{
			yylex.(*lexer).result = SelectStmt{Columns: yyS[yypt-2].columnNameList, Table: yyS[yypt-0].identifier}
		}
	case 97:
		{
			yylex.(*lexer).result = CreateTableStmt{
				Table:        yyS[yypt-5].identifier,
				Columns:      yyS[yypt-3].columnDefList,
				Constraints:  yyS[yypt-2].tableConstraintList,
				WithoutRowid: yyS[yypt-0].withoutRowid,
			}
		}
	case 98:
		{
			yylex.(*lexer).result = CreateIndexStmt{
				Index:          yyS[yypt-6].identifier,
				Table:          yyS[yypt-4].identifier,
				Unique:         yyS[yypt-8].unique,
				IndexedColumns: yyS[yypt-2].indexedColumnList,
				Where:          yyS[yypt-0].where,
			}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
